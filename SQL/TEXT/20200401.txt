
 + ALTER TABLE - 테이블 변경

 - 테이블 구조 ( Schema, 스키마 ) 를 변경하기 위한 SQL

 - 테이블을 지정해서 어떤 변경사항을 적용할 것인지에 따라 추가 구문이
	달라진다

 - 수행 목적에 따라 구문의 키워드가 달라진다

	***************************************

	ADD	- 테이블의 구조 ( 스키마 ) 추가
	MODIFY	- 테이블의 구조 ( 스키마 ) 변경
	DROP	- 테이블의 구조 ( 스키마 ) 삭제

	***************************************

 + ALTER TABLE tablename ADD ( colname coltype ) 
  - 새로운 컬럼 추가
  - 마지막 컬럼으로 추가된다 ( 마지막 COLUMN_ID 부여받는다 )
  - 이미 존재하는 컬럼들 중간에 추가할 수 없다


 + ALTER TABLE tablename MODIFY( colname coltype );

  - 컬럼 데이터타입 변경

  - 데이터타입을 바꾸거나, 크기를 변경할 수 있다
  - 데이터타입에 종속된 제약조건을 변경할 수 있다 ( ex ) NOT NULL )

  - 해당 컬럼에 데이터가 있을 때 없을 때 동작이 다르다

		데이터 없음 	데이터 있음
	
	타입 	변경 가능	변경불가
	크기 	변경 가능	이미 존재하는 데이터보다 작게 불가
				(존재하는 데이터 파괴, 손상 안됌)
	
	** 예외 : CHAR 와 VARCHAR2 는 이미 데이터가 있어도 서로 변경가능하다

 + ALTER TABLE tablename DROP COLUMN colname;
  - 컬럼 삭제




 ** 테이블의 컬럼 삭제는 테이블단위로 LOCK 이 걸린다
 ** 서비스 중에 컬럼을 함부로 DROP 해서는 안된다


 + ALTER TABLE tablename SET UNUSED ( colname );
 - 컬럼 비활성화
 - 복구 불가능함

 - 물리적으로 삭제하지는 않지만 컬럼을 사용할 수 없게 만든다

 + ALTER TABLE tablename DROP UNUSED COLUMNS ;
 - 비활성화된 컬럼들 물리적 삭제 ( 완전 삭제 )



 + ALTER TABLE tablename RENAME TO 새테이블명;
 - 테이블명 변경


 + ALTER TABLE tablename RENAME COLUMN 기존컬럼명 TO 새컬럼명;
 - 컬럼명 변경


------------------------------------------------------------

 + 테이블 삭제 *****************

 - DROP TABLE tablename
	DDL 
	Rollback 불가능
	테이블 삭제 



 - TRUNCATE TABLE tablename
	DDL
	Rollback 불가능
	테이블 내용 ( 데이터 ) 삭제
	테이블 스키마를 유지한다 - TRUNCATE  를 쓰는 이유~


 - DELETE tablename - ( 트랜잭션이 생김 ) - COMMIT 이나 ROLLBACK 해줘야함
	DML
	Rollback 가능
	테이블 내용 ( 데이터 ) 삭제



 ** TRUNCATE 와 DELETE 의 차이점

	TRUNCATE 는 DDL
	DELETE 는 DML

	TRUNCATE 는 데이터가 차지하고 있던 물리적인 공간을 삭제한다
	( 용량이 줄어든다 )

	DELETE 는 데이터가 차지하고 있던 공간을 빈 공간으로 만든다
	( 용량이 유지된다 )

	일반적인 데이터 삭제에는 DELETE 를 사용하고
	테이블 전체 데이터를 초기화 ( 삭제 ) 할 때에는 TRUNCATE를 사용한다


 + 인덱스, Index

 - 색인

 - 테이블의 검색( 탐색 ) 속도 향상을 위한 데이터베이스 객체

 - 테이블의 컬럼을 기준으로 적용하는 객체
 - 하나의 테이블에 여러 개 인덱스 적용 가능

 - 테이블과는 독립적으로 생성되는 오브젝트
 - 테이블의 컬럼에 의존적

 - UNIQUE KEY ( 유일키, UK ) 제약 사항이 걸린 컬럼은
  인덱스를 자동으로 생성한다
 - 테이블의 컬럼값을 전부 추출해서 인덱스를 생성한다
 - 인덱스에는 기준컬럼의 값과 원본데이터의 위치를 저장하고 있다



 + 인덱스 장점
 - 테이블 탐색할 때 전체탐색( FULL SCAN ) 횟수를 줄여준다 - ** 인덱스를 써야만 하는 이유 **
 - 전체탐색 상황에서도 약간의 시스템 성능저하를 줄여줄 수 있다



 + 인덱스 단점
 - 인덱스 객체를 생성하는 데 시간이 필요하다 ( 추가적인 시간이 필요 자체가 단점 )
 - 인덱스 객체를 위한 별도의 공간이 필요하다
 - 검색 성능은 향상되지만 추가, 삭제, 수정에는 큰 도움이 되지 않는다 ** 큰 단점 ** 
 - 추가 , 삭제, 수정이 테이블에 발생하면 인덱싱 작업을 다시 수행해야 한다 
 
 + 인덱스 생성이 필요한 경우
 - 데이터가 많을 때 ( 약 1000건 이상일떄 )
 - WHRER 구문에서 조건으로 특정 컬럼을 많이 사용될 때
 - JOIN 조건 ( ON 절 ) 에서 특정 컬럼이 많이 사용될 때
 
 + 인덱스 생성이 불필요한 경우
 - 데이터가 적을 때 ( 수 천 건 미만)
 - SELECT 보다, INSERT, UPDATE, DELETE 가 빈번한 경우 
 - 인덱스가 적용된 조회 결과가 전체 행의 상당 부분을 차지할 때 ( 약 15 %)
 
 
  + 인덱스 종류

 - Non-Unique INDEX : 중복 허용 인덱스

 - Unique INDEX : 중복 비허용 인덱스

	---------------------

 - Composite INDEX : 복합 컬럼 인덱스 - ( 컬럼을 한개가 아닌 여러개를 하면 )
